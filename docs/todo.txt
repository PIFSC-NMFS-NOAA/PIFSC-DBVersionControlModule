X define unique key constraints on the app_name and version fields so that a given update isn't logged twice and will alert the user if this is attempted

X implement an undo log so that a given database module can be uninstalled safely (drop all objects that are a part of the combined DDL/DML file)
	X document the development of a rollback file 
	X develop the DDL to revert the DB upgrade file for the corresponding version (e.g. rolllback version 0.3 reverts the changes made by the upgrade version 0.3 file)
	X when developing a rollback script for a given project include the corresponding external module rollback scripts to rollback the upgraded module versions




_ update documentation to cite LCE project as examples of integrating rollback and upgrade files (version 1.2 of upgrade and rollback scripts and the version 1.2 upgrade and rollback plans)

X combined file can simply be a series of references to the upgrade files in sequential order
	X check if a relative path can be used so that the absolute path does not need to be defined

_ explore using the DB version control module to track hotfixes (for small incremental updates that could be bundled into a single update at a later date)
	_ propose that the incremental updates be saved in a single hotfix DDL/DML file with a different naming convention in the upgrades/hotfix folder or just in the upgrades folder that can be committed multiple times as the hotfixes are applied.  This can be versioned (maybe in a specific version hotfix branch) and then when it is merged into the master/production branch it could be converted into an actual standard database upgrade file

X update the UPGRADE_DESC to be a CLOB field (2000 characters is not always sufficient)

X add in the external_modules folders as blank folders in the templates (README.txt in each one to explain the purpose)
X implement automated database deployments using SQL*Plus
